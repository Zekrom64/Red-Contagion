package com.redcontagion.util;

public class Map3D<T> {
	
	@SuppressWarnings("unchecked")
	private Map3D<T>.Map3DEntry[] entries = (Map3D<T>.Map3DEntry[]) new Map3D<?>.Map3DEntry[4096];
	
	protected int hash(int x, int y, int z) {
		int hash = (x >> 4) & 0xF;
		hash |= y & 0xF0;
		hash |= (z << 4) & 0xF00;
		return hash;
	}
	
	private class Map3DEntry {
		
		public int x, y, z;
		public T t;
		public Map3DEntry next;
		
		public Map3DEntry(int x, int y, int z, T t) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.t = t;
		}
		
		@Override
		public int hashCode() {
			return hash(x,y,z);
		}
		
	}
	
	/** Gets a value in the 3d map. If no value is found, <b>null</b> is returned.
	 * 
	 * @param x X coordinate
	 * @param y Y coordinate
	 * @param z Z coordinate
	 * @return Value stored, or <b>null</b>
	 */
	public T get(int x, int y, int z) {
		Map3DEntry e = entries[hash(x,y,z)];
		if (e==null) return null;
		do {
			if (e.x == x && e.y == y && e.z == z) return e.t;
			e = e.next;
		} while(e != null);
		return null;
	}
	
	/** Sets a value in the 3d map. Returns the last value stored or <b>null</b> if the value was added.
	 * 
	 * @param x X coordinate
	 * @param y Y coordinate
	 * @param z Z coordinate
	 * @param t Value to set
	 * @return Previous value, or <b>null</b>
	 */
	public T set(int x, int y, int z, T t) {
		int hash = hash(x,y,z);
		Map3DEntry e = entries[hash];
		if (e!=null) {
			do {
				if (e.x == x && e.y == y && e.z == z) {
					T old = e.t;
					e.t = t;
					return old;
				} else if (e.next == null) {
					e.next = new Map3DEntry(x, y, z, t);
					return null;
				} else e = e.next;
			} while (true);
		} else {
			entries[hash] = new Map3DEntry(x, y, z, t);
			return null;
		}
	}
	
	public T remove(int x, int y, int z) {
		int hash = hash(x,y,z);
		Map3DEntry e = entries[hash];
		if (e == null) return null;
		if (e.x == x && e.y == y && e.z == z) {
			entries[hash] = e.next;
			return e.t;
		}
		Map3DEntry last;
		while(e != null) {
			last = e;
			e = e.next;
			if (e.x == x && e.y == y & e.z == z) {
				last.next = e.next;
				return e.t;
			}
		}
		return null;
	}
	
}
